% This is used to classify the test dataset. Here the number of groups determines the number of nearest vectors hence it is dynamic. This code has three clusters and has 3*4=12 nearest vectors


D=zeros(length(test),12);
for k=1:length(test)
[~, C1]=knnsearch(gr1_RO(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
[~, C2]=knnsearch(gr2_RO(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
[~, C3]=knnsearch(gr1_VO(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
[~, C4]=knnsearch(gr2_VO(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
[~, C5]=knnsearch(gr1_GLP(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
[~, C6]=knnsearch(gr2_GLP(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
[~, C7]=knnsearch(gr1_BLP(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
[~, C8]=knnsearch(gr2_BLP(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
[~, C9]=knnsearch(gr3_RO(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
[~, C10]=knnsearch(gr3_VO(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
[~, C11]=knnsearch(gr3_GLP(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
[~, C12]=knnsearch(gr3_BLP(:,[3  5 6 7  11]),test(k,[3  5 6 7  11]),'k',10,"IncludeTies",true);
C=[]; S=[];
C=[C cell2mat(C1)];
S=[S length(cell2mat(C1))];
C=[C cell2mat(C2)];
S=[S length(cell2mat(C2))];
C=[C cell2mat(C3)];
S=[S length(cell2mat(C3))];
C=[C cell2mat(C4)];
S=[S length(cell2mat(C4))];
C=[C cell2mat(C5)];
S=[S length(cell2mat(C5))];
C=[C cell2mat(C6)];
S=[S length(cell2mat(C6))];
C=[C cell2mat(C7)];
S=[S length(cell2mat(C7))];
C=[C cell2mat(C8)];
S=[S length(cell2mat(C8))];
C=[C cell2mat(C9)];
S=[S length(cell2mat(C9))];
C=[C cell2mat(C10)];
S=[S length(cell2mat(C10))];
C=[C cell2mat(C11)];
S=[S length(cell2mat(C11))];
C=[C cell2mat(C12)];
S=[S length(cell2mat(C12))];
[~,id]=sort(C);
si=0;
j=1; i=1; count=0;
while (count<=5)
        if(j==1)
            if(id(i)<S(j))
                D(k,j)=D(k,j)+1
                count=count+1;
            else
               
                si=si+S(j);
                 j=j+1;
            end
        end
        if(j>1)
            if(id(i)<si+S(j))
                D(k,j)=D(k,j)+1;
                count=count+1;
            else
               
                si=si+S(j);
                 j=j+1;
            end
        end
end
end
